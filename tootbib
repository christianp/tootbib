#!/usr/bin/env python3
import requests
import os
import re
from mastodon import Mastodon
import sys
import argparse
from urllib.parse import urlparse
from get_featured_image import get_featured_image, get_featured_image_from_pdf

API_BASE_URL = 'https://mathstodon.xyz'
APPCRED_FILE = 'tootercred.txt'
USERCRED_FILE = 'tooter_usercred.txt'
BIBSITE = 'http://read.somethingorotherwhatever.com'
BITS_ORDER = ['new','title', 'author', 'collections', 'abstract', 'url', 'pdf', 'view']


def up_to_last_space(s):
    m = re.search(r'\s+', s[::-1])
    if m:
        return s[:len(s)-m.end()]
    else:
        return s

def fix_maths_delimiters(s):
    def fix(m):
        return '\\({}\\)'.format(m.group(1))
    return re.sub(r'\$([^$]*)\$', fix, s)


class Tooter(object):
   
    def __init__(self, options):
        self.options = options

    def get_entry(self, key):
        r = requests.get('{}/entry/{}?format=json'.format(self.options.bibsite, key))
        return r.json()

    def get_image(self,entry):
        if entry['pdf']!=entry['url']:
            image_url, image = get_featured_image(entry['url'])
            if image_url is not None:
                r = requests.get(image_url,stream=True)
                filename = urlparse(image_url).path.split('/')[-1]
                path = os.path.join('images',filename)
                with open(path,'wb') as f:
                    for chunk in r:
                        f.write(chunk)
                
                return path,image_url

        path, image = get_featured_image_from_pdf(entry['pdf'])

        if path is None:
            raise Exception("No image")

        return path,path

    def write_toot(self, entry):
        bits = {
            'title': entry['title'], 
            'url': 'URL: {}'.format(entry['url']), 
            'view': 'Entry: {}'.format(entry['view'])
        }
        if self.options.new:
            bits['new'] = 'New entry!'

        if entry['type']!='misc':
            bits['author'] = '{} by {}'.format(entry['nicetype'], entry['author'])

        if entry['pdf'] is not None and entry['pdf']!=entry['url']:
            bits['pdf'] = 'PDF: {}'.format(entry['pdf'])

        if len(entry['collections']):
            bits['collections'] = 'In {}: {}'.format('collection' if len(entry['collections'])==1 else 'collections', ',  '.join(entry['collections']))

        def make_toot(bits):
            sep = '\n'
            lines = [fix_maths_delimiters(bits[k]) for k in self.options.order if k in bits]
            return sep.join(lines)

        if entry['abstract']:
            max_abstract_length = 500-len(make_toot(bits))-4
            abstract = re.sub(r'[\n\r]+', ' ', entry['abstract'])
            abstract = fix_maths_delimiters(abstract)
            if len(entry['abstract'])>=max_abstract_length:
                abstract = up_to_last_space(abstract[:max_abstract_length])+'...'

            bits['abstract'] = abstract

        toot = make_toot(bits)
        return toot

    def random_entry(self):
        r=requests.get('{}/random?format=json'.format(self.options.bibsite))
        entry = r.json()
        return entry

    def register_app(self):
        Mastodon.create_app('tooter', to_file=self.options.appfile, api_base_url=self.options.api_base_url)
        print("App registered")

    def login(self):
        print("Logging in...")
        mastodon = Mastodon(client_id = self.options.appfile, api_base_url=self.options.api_base_url)
        mastodon.log_in(
            self.options.user_email, 
            self.options.password, 
            to_file = self.options.userfile
        )
        print("OK. Access token saved to {}".format(self.options.userfile))


    def toot(self):
        print("Tooting...")
        mastodon = Mastodon(
            client_id = self.options.appfile, 
            access_token = self.options.userfile, 
            api_base_url = self.options.api_base_url
        )

        if self.options.key is None:
            entry = self.random_entry()
        else:
            entry = self.get_entry(self.options.key)

        toot = self.write_toot(entry)

        if self.options.include_image:
            try:
                image_path, image_url = self.get_image(entry)
                media = [mastodon.media_post(image_path)]
            except Exception:
                media = []
        else:
            media = []

        result = mastodon.status_post(status=toot, media_ids=media)
        if 'error' in result:
            print('Error: {}'.format(result['error']))
        else:
            print("Tooted at {}".format(result['url']))

    def test(self):
        if self.options.key is None:
            entry = self.random_entry()
        else:
            entry = self.get_entry(self.options.key)
        print(self.write_toot(entry))

        if self.options.include_image:
            try:
                image_path, image_url = self.get_image(entry)
                print("Would use image {}".format(image_url))
            except Exception as e:
                print("No image found on the page")
                print(e)

    def run(self, command):
        commands = {
            'register': self.register_app,
            'login': self.login,
            'toot': self.toot,
            'test': self.test
        }
        return commands[command]()

class WordListAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        words = re.split(r'\s+',values)
        setattr(namespace, self.dest, words)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Toot a random entry from bib-site to a Mastodon instance.')
    parser.add_argument('command', default='toot', choices=['toot', 'login', 'register', 'test'], nargs='?', help='The action to perform')
    parser.add_argument('key', nargs='?', help='Key of the entry to toot, if command is toot or test')
    parser.add_argument('--mastodon', dest='api_base_url', default=API_BASE_URL, help='URL of the Mastodon instance')
    parser.add_argument('--bibsite', default=BIBSITE, help='URL of the bibsite instance')
    parser.add_argument('--email', dest='user_email', help='Your Mastodon account\'s email address')
    parser.add_argument('--password', help='Your Mastodon account\'s password')
    parser.add_argument('--order', default=BITS_ORDER, action=WordListAction, help='Parts of the toot, in the desired order')
    parser.add_argument('--appfile', default=APPCRED_FILE, help='File to save application token in')
    parser.add_argument('--userfile', default=USERCRED_FILE, help='File to save access token in')
    parser.add_argument('--no-image', dest='include_image', action='store_false', help='Don\'t try to find an image to attach to the toot')
    parser.add_argument('--new',action='store_true',help='This is a new entry')
    args = parser.parse_args()

        
    tooter = Tooter(args)
    tooter.run(args.command)
